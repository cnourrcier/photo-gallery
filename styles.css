* {
    box-sizing: border-box;
}

body {
    margin: 0;
    font-family: sans-serif;
    background-color: #f5f6f7;
}

.header {
    text-align: center;
    text-transform: uppercase;
    padding: 32px;
    background-color: #0a0a23;
    color: #fff;
    border-bottom: 4px solid #fdb347;
}

.gallery {
    display: flex;
    flex-direction: row;
    /* options - row, row-reverse, column, column-reverse */
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    padding: 20px 10px;
    max-width: 1400px;
    margin: 0 auto;
    gap: 16px;
    /* The gap CSS shorthand property sets the gaps, also known as gutters, between rows and columns. The gap property and its row-gap and column-gap sub-properties provide this functionality for flex, grid, and multi-column layout. You apply the property to the container element. */
}

.gallery img {
    width: 100%;
    max-width: 350px;
    height: 300px;
    object-fit: cover;
    /* causes the image to fill the img container while maintaining aspect ratio, resulting in cropping to fit. */
    border-radius: 10px;
}

.gallery::after {
    content: '';
    width: 350px;
}

/* The ::after pseudo-element creates an element that is the last child of the selected element. You can use it to add an empty element after the last image. If you give it the same width as the images it will push the last image to the left when the gallery is in a two-column layout. Right now, it is in the center because you set justify-content: center on the flex container. */



/* Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container. */
/* To use it, give an element a display property of flex. This will make the element a flex container. Any direct children of a flex container are called flex items. */